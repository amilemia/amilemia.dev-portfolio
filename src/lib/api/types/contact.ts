/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a contact form */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "name": "John Doe",
                     *       "email": "john@example.com",
                     *       "message": "Hello, I'm interested in your work!"
                     *     } */
                    "application/json": components["schemas"]["ContactRequest"];
                };
            };
            responses: {
                /** @description Message sent successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "ok": true
                         *     } */
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                /** @description Invalid request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "ok": false,
                         *       "error": "Validation failed",
                         *       "fieldErrors": {
                         *         "name": [
                         *           "String must contain at least 2 character(s)"
                         *         ],
                         *         "email": [
                         *           "Invalid email"
                         *         ],
                         *         "message": [
                         *           "String must contain at least 10 character(s)"
                         *         ]
                         *       }
                         *     } */
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "ok": false,
                         *       "error": "Failed to send message. Please try again later."
                         *     } */
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "name": "Jane Smith",
         *       "email": "jane@example.com",
         *       "message": "I would like to discuss a potential project with you."
         *     } */
        ContactRequest: {
            /** @description Full name of the sender */
            name: string;
            /**
             * Format: email
             * @description Email address of the sender
             */
            email: string;
            /** @description The message content */
            message: string;
        };
        SuccessResponse: {
            /** @constant */
            ok: true;
        };
        ErrorResponse: {
            /** @constant */
            ok: false;
            /** @description Error message */
            error: string;
            /** @description Field-specific validation errors, if any */
            fieldErrors?: {
                [key: string]: string[];
            } | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
